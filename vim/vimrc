call plug#begin('~/.vim/plugged')
	Plug 'sheerun/vim-polyglot'
	Plug 'dense-analysis/ale'
	Plug 'ap/vim-css-color'
	Plug 'nanotech/jellybeans.vim'
call plug#end()            

filetype plugin indent on
syntax on
set autoread
set clipboard=unnamedplus
if has('mouse')
    set mouse=a mousemodel=popup
endif
set noshowmode
set wildmenu
set wildignore+=*.o,*.obj,*.bin,*.dll,*.exe
set wildignore+=*/.git/*,*/.svn/*,*/__pycache__/*,*/build/**
set wildignore+=*.pyc
set wildignore+=*.DS_Store
set wildignore+=*.aux,*.bbl,*.blg,*.brf,*.fls,*.fdb_latexmk,*.synctex.gz,*.pdf
"set ruler rulerformat=%15(%c%V\ %p%%%)
set number relativenumber
set colorcolumn=110
set encoding=UTF-8
set splitright splitbelow 
set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
set smartcase
set autoindent
set spell spelllang=en
set hlsearch incsearch
set laststatus=2
set cmdheight=1
set cursorline
set backspace=indent,eol,start
set lazyredraw
set list listchars=tab:→\ ,trail:·,space:·,eol:¬,extends:❯,precedes:❮
set foldmethod=syntax fillchars=fold:\ ,vert:\|
set linebreak showbreak=↪\ 
set fillchars=eob:\ 
" Completion
set completeopt+=preview completeopt+=menuone completeopt+=noinsert shortmess+=c
" Misc
set directory=$XDG_CACHE_HOME/vim/swap,~/.vim,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp

if has('nvim')
	set guicursor=
	set background="dark"
	set rtp+=$HOME/.vim
	"set runtimepath=$XDG_CONFIG_HOME/vim/,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNIME
else
	set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
	set termguicolors
endif

if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    " render properly when inside 256-color tmux and GNU screen.
    " see also https://sunaku.github.io/vim-256color-bce.html
    set t_ut=
endif

runtime macros/matchit.vim

"ColorScheme 
function! Hilites() abort
	if exists('+termguicolors')
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif

	highlight StatusLineAcc	ctermfg=8	ctermbg=NONE term=underline
	highlight StatusLineTxt	ctermfg=7	ctermbg=8	 term=underline
	highlight Folded		ctermbg=233 term=standout
	highlight CursorLine	ctermbg=234 term=underline
	highlight CursorLineNr	ctermbg=234 cterm=bold
	highlight ColorColumn	ctermbg=236 term=reverse
	highlight Search		ctermbg=180 ctermfg=235 term=reverse
	highlight IncSearch		ctermbg=59  ctermfg=180 term=reverse
	highlight SpellBad		ctermbg=233 ctermfg=203 cterm=underline term=reverse
	highlight EndOfBuffer	ctermfg=235
endfunction

augroup MyColors
	autocmd!
	autocmd ColorScheme * call Hilites()
augroup END

colorscheme jellybeans
let g:jellybeans_use_term_italics = 1
let g:jellybeans_use_lowcolor_black = 1


let g:currentmode={
			\'n'  : 'Normal',
			\'v'  : 'Visual',
			\'V'  : 'V·Line',
			\'' : 'V·Block',
			\'i'  : 'Insert',
			\'R'  : 'Replace',
			\'Rv' : 'V·Replace',
			\'c'  : 'Command',
			\}

let g:ale_fixers = {
			\'*': ['remove_trailing_lines', 'trim_whitespace'],
			\'javascript': ['eslint'],
			\'python': ['autoimport', 'autopep8']
			\}
" let g:ale_linters = {
" 			\'python': ['pylint', 'pyls']
" 			\}
let g:ale_completion_autoimport = 1
let g:ale_completion_enabled = 1
let g:ale_floating_preview = 1
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰']
let g:ale_hover_cursor = 0
let g:ale_set_balloons = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_sign_error = ' ●'
let g:ale_sign_warning = ' .'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

function! LinterStatus() abort
	let l:counts = ale#statusline#Count(bufnr(''))
	let l:all_errors = l:counts.error + l:counts.style_error
	let l:all_non_errors = l:counts.total - l:all_errors
	return l:counts.total == 0 ? 'OK' : printf(
				\   '%dW, %dE',
				\   all_non_errors,
				\   all_errors
				\)
endfunction

function! RedrawModeColors(mode)
  " Normal mode
  if a:mode == 'n'
    highlight StatusLineModAcc ctermbg=NONE ctermfg=4 
    highlight StatusLineModTxt ctermbg=4	ctermfg=15
  " Insert mode
  elseif a:mode == 'i'
    highlight StatusLineModAcc ctermbg=NONE ctermfg=6
    highlight StatusLineModTxt ctermbg=6	ctermfg=15
  " Replace mode
  elseif a:mode == 'R'
    highlight StatusLineModAcc ctermbg=NONE ctermfg=1
    highlight StatusLineModTxt ctermbg=1	ctermfg=15
  " Visual mode
  elseif a:mode == 'v' || a:mode == 'V' || a:mode == '^V'
    highlight StatusLineModAcc ctermbg=NONE	ctermfg=2
    highlight StatusLineModTxt ctermbg=2	ctermfg=7
  " Command mode
  elseif a:mode == 'c'
    highlight StatusLineModAcc ctermbg=NONE ctermfg=8
    highlight StatusLineModTxt ctermbg=8	ctermfg=7
  " Terminal mode
  elseif a:mode == 't'
    highlight StatusLineModAcc ctermbg=NONE ctermfg=7
    highlight StatusLineModTxt ctermbg=7	ctermfg=15
  endif
  " Return empty string so as not to display anything in the statusline
  return ''
endfunction

set statusline=%{RedrawModeColors(mode())}
set statusline+=%#StatusLineAcc#
set statusline+=\%#StatusLineTxt#%02n
set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineModAcc#
set statusline+=%#StatusLineModTxt#%{toupper(g:currentmode[mode()])}
set statusline+=%#StatusLineModAcc#
set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineTxt#%t								"tail of the filename
set statusline+=%{&modified?'\ [+]':''}							"modified flag
set statusline+=%{&readonly?'\ [RO]':''}						"read only flag
set statusline+=%#StatusLineAcc#
set statusline+=%<
set statusline+=%=												"left/right separator
set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineTxt#%{LinterStatus()}
set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineTxt#%{&ff}							"file format
set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineTxt#%{strlen(&fenc)?&fenc:'none'}	"file encoding
set statusline+=%#StatusLineAcc#
" set statusline+=%#StatusLineTxt#%y							"filetype
" set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineTxt#%02l,\ %02c						"Line iNum, Cursor Column
set statusline+=%#StatusLineAcc#
set statusline+=%#StatusLineTxt#\ %L\ 並%P						"total lines /Percent through file
set statusline+=%#StatusLineAcc#
"
" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_keepdir=0		" current and browsing dir synced
let g:netrw_winsize=15		" split size
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Mappings
let mapleader=" "

nnoremap <silent> <C-e> <Plug>(ale_next_wrap)
nnoremap <S-n> :Lex<cr>
nnoremap <C-s> :w<cr>
inoremap <C-s> <Esc>:w<cr>
noremap <C-a> <home>
noremap <C-d> <end>
nnoremap <silent><Return> @=(foldlevel('.')?'za':"\<lt>Return>")<cr>
nnoremap <C-b> :g//#<Left><Left>
map <F2> :mksession! ~/.cache/.vim_session<cr>
map <F3> :source ~/.cache/.vim_session<cr> <home>
nnoremap <F10> :set invpaste<cr>
nnoremap <Leader><Space> :let @/=''<cr>
nnoremap <Leader><left> :vertical resize -5<cr>
nnoremap <Leader><right> :vertical resize +5<cr>
" Split Navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Tab Navigation
nnoremap <S-l> :tabprevious<cr>
nnoremap <S-h> :tabnext<cr>
" Buffer Navigation
nnoremap <Leader>l :bnext<cr>
nnoremap <Leader>h :bprev<cr>
" Move Lines
nnoremap <S-k> :move .-2<cr>
nnoremap <S-j> :move .+1<cr>
vnoremap <S-k> :move '<-2<cr>gv=gv
vnoremap <S-j> :move '>+1<cr>gv=gv

